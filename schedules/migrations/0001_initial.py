# Generated by Django 5.1.7 on 2025-08-02 09:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
        ('rooms', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('academic_year', models.CharField(max_length=10)),
                ('semester', models.CharField(max_length=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('level', models.CharField(blank=True, choices=[('L1', 'Licence 1'), ('L2', 'Licence 2'), ('L3', 'Licence 3'), ('M1', 'Master 1'), ('M2', 'Master 2')], max_length=5)),
                ('description', models.TextField(blank=True)),
                ('is_published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedules.academicperiod')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('curriculum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.curriculum')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='courses.teacher')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleConstraint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('constraint_type', models.CharField(choices=[('teacher_availability', 'Disponibilité enseignant'), ('room_availability', 'Disponibilité salle'), ('course_timing', 'Horaires de cours'), ('student_workload', 'Charge de travail étudiant'), ('resource_requirement', 'Exigence de ressource'), ('curriculum_rule', 'Règle de curriculum'), ('custom', 'Personnalisée')], max_length=25)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('constraint_data', models.JSONField(default=dict)),
                ('priority', models.IntegerField(default=1)),
                ('is_hard_constraint', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='constraints', to='schedules.schedule')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('ical', 'iCalendar'), ('json', 'JSON'), ('csv', 'CSV')], max_length=10)),
                ('file_path', models.FileField(upload_to='schedule_exports/')),
                ('export_parameters', models.JSONField(default=dict)),
                ('file_size', models.IntegerField(default=0)),
                ('exported_at', models.DateTimeField(auto_now_add=True)),
                ('exported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exports', to='schedules.schedule')),
            ],
            options={
                'ordering': ['-exported_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('optimization_type', models.CharField(choices=[('manual', 'Manuel'), ('automatic', 'Automatique'), ('ml_assisted', 'Assisté par ML')], default='automatic', max_length=20)),
                ('optimization_parameters', models.JSONField(default=dict)),
                ('conflicts_before', models.IntegerField(default=0)),
                ('conflicts_after', models.IntegerField(default=0)),
                ('optimization_score', models.FloatField(default=0.0)),
                ('efficiency_metrics', models.JSONField(default=dict)),
                ('algorithm_used', models.CharField(blank=True, max_length=50)),
                ('execution_time', models.FloatField(default=0.0)),
                ('iterations', models.IntegerField(default=0)),
                ('convergence_achieved', models.BooleanField(default=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('logs', models.TextField(blank=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimizations', to='schedules.schedule')),
                ('started_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specific_date', models.DateField(blank=True, null=True)),
                ('specific_start_time', models.TimeField(blank=True, null=True)),
                ('specific_end_time', models.TimeField(blank=True, null=True)),
                ('session_type', models.CharField(choices=[('CM', 'Cours Magistral'), ('TD', 'Travaux Dirigés'), ('TP', 'Travaux Pratiques'), ('CONF', 'Conférence'), ('EXAM', 'Examen')], default='CM', max_length=10)),
                ('expected_students', models.IntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('difficulty_score', models.FloatField(blank=True, null=True)),
                ('complexity_level', models.CharField(blank=True, max_length=20)),
                ('scheduling_priority', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rooms.room')),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='schedules.schedule')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.teacher')),
            ],
            options={
                'ordering': ['time_slot__day_of_week', 'time_slot__start_time'],
            },
        ),
        migrations.CreateModel(
            name='Conflict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conflict_type', models.CharField(choices=[('teacher_double_booking', 'Enseignant déjà occupé'), ('room_double_booking', 'Salle déjà occupée'), ('student_overlap', 'Conflit étudiant'), ('resource_unavailable', 'Ressource indisponible'), ('constraint_violation', 'Violation de contrainte')], max_length=30)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Élevée'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('conflicting_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conflicts_as_conflicting', to='schedules.schedulesession')),
                ('schedule_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedules.schedulesession')),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='ScheduleTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('level', models.CharField(choices=[('L1', 'Licence 1'), ('L2', 'Licence 2'), ('L3', 'Licence 3'), ('M1', 'Master 1'), ('M2', 'Master 2')], max_length=5)),
                ('template_data', models.JSONField(default=dict)),
                ('default_constraints', models.JSONField(default=dict)),
                ('usage_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('curriculum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.curriculum')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Lundi'), ('tuesday', 'Mardi'), ('wednesday', 'Mercredi'), ('thursday', 'Jeudi'), ('friday', 'Vendredi'), ('saturday', 'Samedi'), ('sunday', 'Dimanche')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('name', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('day_of_week', 'start_time', 'end_time')},
            },
        ),
        migrations.AddField(
            model_name='schedulesession',
            name='time_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedules.timeslot'),
        ),
        migrations.AlterUniqueTogether(
            name='schedulesession',
            unique_together={('schedule', 'time_slot', 'room')},
        ),
    ]
