#!/usr/bin/env python
"""
Script de test pour d√©montrer l'ordre de programmation des cours
"""
import os
import django

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'oapet_schedule_backend.settings')
django.setup()

from courses.models import Course
from schedules.advanced_generation_service import AdvancedScheduleGenerator


def test_course_ordering():
    """Teste l'ordre de programmation des cours"""

    print("=" * 80)
    print("TEST DE L'ORDRE DE PROGRAMMATION DES COURS")
    print("=" * 80)
    print()

    # Simuler quelques cours
    test_courses = [
        # Math√©matiques (priorit√© 2)
        {'code': 'MATH-TP', 'name': 'Maths TP', 'type': 'TP', 'priority': 2},
        {'code': 'MATH-CM', 'name': 'Maths CM', 'type': 'CM', 'priority': 2},
        {'code': 'MATH-TD', 'name': 'Maths TD', 'type': 'TD', 'priority': 2},

        # Informatique (priorit√© 1 - plus haute)
        {'code': 'INFO-TD', 'name': 'Info TD', 'type': 'TD', 'priority': 1},
        {'code': 'INFO-CM', 'name': 'Info CM', 'type': 'CM', 'priority': 1},
        {'code': 'INFO-TP', 'name': 'Info TP', 'type': 'TP', 'priority': 1},

        # Physique (priorit√© 3 - plus basse)
        {'code': 'PHYS-CM', 'name': 'Physique CM', 'type': 'CM', 'priority': 3},
        {'code': 'PHYS-TD', 'name': 'Physique TD', 'type': 'TD', 'priority': 3},
    ]

    print("üìö Cours √† programmer (dans l'ordre d'entr√©e):")
    print("-" * 80)
    for i, course in enumerate(test_courses, 1):
        print(f"{i}. {course['code']:15} - {course['name']:20} | Type: {course['type']:4} | Priorit√©: {course['priority']}")
    print()

    # Simuler le tri du g√©n√©rateur
    course_type_order = {'CM': 1, 'TD': 2, 'TP': 3, 'TPE': 4, 'CONF': 5, 'EXAM': 6}

    def extract_base_name(code):
        for suffix in ['-CM', '-TD', '-TP', '-TPE', '-CONF', '-EXAM']:
            if code.endswith(suffix):
                return code[:-len(suffix)]
        return code

    # Trier selon la logique du g√©n√©rateur
    sorted_courses = sorted(test_courses, key=lambda c: (
        c['priority'],                              # 1. Priorit√© (1 = haute)
        course_type_order.get(c['type'], 99),       # 2. Type de cours (CM avant TD avant TP)
        extract_base_name(c['code'])                # 3. Nom de base (regrouper Math-CM, Math-TD)
    ))

    print("‚úÖ ORDRE DE PROGRAMMATION (selon le g√©n√©rateur):")
    print("-" * 80)
    print("  #  | Code          | Nom                  | Type | Priorit√© | Explication")
    print("-" * 80)

    for i, course in enumerate(sorted_courses, 1):
        base_name = extract_base_name(course['code'])
        explanation = f"Priorit√© {course['priority']}, {course['type']} de {base_name}"
        print(f"{i:3}  | {course['code']:13} | {course['name']:20} | {course['type']:4} | {course['priority']:8} | {explanation}")

    print()
    print("=" * 80)
    print("üìã R√âSUM√â DES R√àGLES DE TRI:")
    print("=" * 80)
    print("1Ô∏è‚É£  PRIORIT√â MANUELLE (1 = programm√© en premier)")
    print("    ‚Üí INFO (priorit√© 1) avant MATH (priorit√© 2) avant PHYS (priorit√© 3)")
    print()
    print("2Ô∏è‚É£  TYPE DE COURS (ordre p√©dagogique)")
    print("    ‚Üí CM programm√© avant TD, TD avant TP, TP avant TPE")
    print()
    print("3Ô∏è‚É£  REGROUPEMENT PAR MATI√àRE (nom de base)")
    print("    ‚Üí MATH-CM, MATH-TD, MATH-TP programm√©s ensemble")
    print()
    print("=" * 80)
    print()

    print("üéØ BONNES PRATIQUES RESPECT√âES:")
    print("   ‚úì Les CM sont programm√©s avant les TD (fondements avant exercices)")
    print("   ‚úì Les TD sont programm√©s avant les TP (th√©orie avant pratique)")
    print("   ‚úì Les cours d'une m√™me mati√®re sont regroup√©s")
    print("   ‚úì Les priorit√©s d√©finies par l'admin sont respect√©es")
    print()

    # V√©rifier l'ordre
    print("üîç V√âRIFICATION:")

    # V√©rifier que INFO vient avant MATH
    info_indices = [i for i, c in enumerate(sorted_courses) if c['code'].startswith('INFO')]
    math_indices = [i for i, c in enumerate(sorted_courses) if c['code'].startswith('MATH')]

    if max(info_indices) < min(math_indices):
        print("   ‚úÖ INFO (priorit√© 1) programm√© avant MATH (priorit√© 2)")
    else:
        print("   ‚ùå Erreur: ordre des priorit√©s non respect√©")

    # V√©rifier que CM vient avant TD vient avant TP pour chaque mati√®re
    for base_name in ['INFO', 'MATH', 'PHYS']:
        courses_of_subject = [c for c in sorted_courses if c['code'].startswith(base_name)]
        types_order = [c['type'] for c in courses_of_subject]

        expected_order = []
        if 'CM' in types_order:
            expected_order.append('CM')
        if 'TD' in types_order:
            expected_order.append('TD')
        if 'TP' in types_order:
            expected_order.append('TP')

        if types_order == expected_order:
            print(f"   ‚úÖ {base_name}: CM ‚Üí TD ‚Üí TP respect√©")
        else:
            print(f"   ‚ùå {base_name}: Ordre incorrect: {' ‚Üí '.join(types_order)}")

    print()
    print("=" * 80)


if __name__ == '__main__':
    test_course_ordering()
